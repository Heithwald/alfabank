{"version":3,"sources":["features/dataFetch/dataFetchSlice.js","app/store.ts","components/LikeButton.tsx","components/DeleteButton.tsx","components/CharacterAbilities.tsx","components/Card.tsx","components/CardList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["slice","createSlice","name","initialState","data","reducers","fetchData","state","action","payload","deleteElement","elementToDelete","find","element","id","parseInt","indexToDelete","indexOf","splice","toggleLike","elementToLike","indexToLike","isLiked","actions","selectData","dataFetch","store","configureStore","reducer","dataFetchReducer","LikeButton","handleClick","onClick","event","Provider","value","className","DeleteButton","CharacterAbilities","characterAbilities","length","map","ability","index","Card","character","useState","setIsLiked","dispatch","useDispatch","src","img_url","alt","origin","abilities","currentTarget","parentElement","window","confirm","CardList","filter","filtered","setFiltered","App","useEffect","axiosFetchData","useSelector","axios","get","then","response","normalizedData","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mLAEaA,EAAQC,YAAY,CAC/BC,KAAM,YACNC,aAAc,CACZC,KAAM,IAERC,SAAU,CACRC,UAAW,SAACC,EAAOC,GACjBD,EAAMH,KAAOI,EAAOC,SAEtBC,cAAe,SAACH,EAAOC,GACrB,IAAIG,EAAkBJ,EAAMH,KAAKQ,MAC/B,SAACC,GAAD,OAAaA,EAAQC,KAAOC,SAASP,EAAOC,YAE1CO,EAAgBT,EAAMH,KAAKa,QAAQN,GACvCJ,EAAMH,KAAKc,OAAOF,EAAe,IAEnCG,WAAY,SAACZ,EAAOC,GAClB,IAAIY,EAAgBb,EAAMH,KAAKQ,MAC7B,SAACC,GAAD,OAAaA,EAAQC,KAAOC,SAASP,EAAOC,YAE1CY,EAAcd,EAAMH,KAAKa,QAAQG,GACrCb,EAAMH,KAAKiB,GAAaC,SAAWf,EAAMH,KAAKiB,GAAaC,Y,EAKTtB,EAAMuB,QAA/CjB,E,EAAAA,UAAWI,E,EAAAA,cAAeS,E,EAAAA,WAC5BK,EAAa,SAACjB,GAAD,OAAWA,EAAMkB,UAAUrB,MACtCJ,IAAf,QC3Ba0B,EAAQC,YAAe,CAClCC,QAAS,CAAEH,UAAWI,K,qCCDXC,EAAa,SAAC,GAAmC,IAAjCR,EAAgC,EAAhCA,QAASS,EAAuB,EAAvBA,YACpC,OACE,wBACEC,QAAS,SAACC,GACRF,EAAYE,IAFhB,SAKGX,EACC,cAAC,IAAYY,SAAb,CACEC,MAAO,CAAEC,UAAW,kCADtB,SAGE,cAAC,IAAD,MAGF,cAAC,IAAYF,SAAb,CAAsBC,MAAO,CAAEC,UAAW,eAA1C,SACE,cAAC,IAAD,SCfGC,EAAe,SAAC,GAA0B,IAAxBN,EAAuB,EAAvBA,YAC7B,OACE,wBAAQC,QAASD,EAAjB,SACE,cAAC,IAAYG,SAAb,CAAsBC,MAAO,CAAEC,UAAW,iBAA1C,SACE,cAAC,IAAD,SCPKE,EAAqB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,mBACnC,OACE,oBAAIH,UAAU,sBAAd,SACGG,EAAmBC,OAChBD,EACGvC,MAAM,EAAG,GACTyC,KAAI,SAACC,EAAiBC,GAAlB,OACH,oBAAgBP,UAAU,oBAA1B,SACGM,GADMC,MAIb,OCCGC,EAAO,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,UAAqB,EACZC,oBAAS,GADG,mBACnCxB,EADmC,KAC1ByB,EAD0B,KAEpCC,EAAWC,cAejB,OACE,sBAAKnC,GAAI+B,EAAU/B,GAAIsB,UAAU,kBAAjC,UACE,qBACEA,UAAU,kBACVc,IAAKL,EAAUM,QACfC,IAAI,oBAEN,sBAAKhB,UAAU,iBAAf,UACE,oBAAIA,UAAU,iBAAd,SAAgCS,EAAU3C,OAC1C,oBAAGkC,UAAU,mBAAb,kBAAsCS,EAAUQ,UAChD,oBAAIjB,UAAU,6BAAd,wBACA,cAAC,EAAD,CAAoBG,mBAAoBM,EAAUS,YAElD,cAAC,EAAD,CAAYhC,QAASA,EAASS,YA1BjB,SAACE,GAClBc,GAAYzB,GACZ0B,EAAS7B,EAAWc,EAAMsB,cAAcC,cAAeA,cAAe1C,QAyBlE,cAAC,EAAD,CAAciB,YAtBC,SAACE,GAChBwB,OAAOC,QAAQ,kBACjBV,EACEtC,EAAcuB,EAAMsB,cAAcC,cAAeA,cAAe1C,eCrB3D6C,EAAW,SAAC,GAAmB,IAKfC,EALFxD,EAAgB,EAAhBA,KAAgB,EAET0C,oBAAS,GAFA,mBAElCe,EAFkC,KAExBC,EAFwB,KAWzC,OACE,sBAAK1B,UAAU,UAAf,UACE,wBAAQA,UAAU,eAAeJ,QAAS,kBAAM8B,GAAaD,IAA7D,oBAGA,qBAAKzB,UAAU,YAAf,UAXuBwB,EAYFC,GAXL,IAAXD,EACHxD,EACAA,EAAKwD,QAAO,SAACf,GAAD,OAAoBA,EAAUvB,YASbmB,KAAI,SAACI,GAAD,OAC/B,cAAC,EAAD,CAAyBA,UAAWA,GAAzBA,EAAU/B,a,iBCoBhBiD,MA/Bf,WAEEC,qBAAU,WACRC,MACC,IAEH,IAAM7D,EAAO8D,YAAY1C,GACnBwB,EAAWC,cAGXgB,EAAiB,WACrBE,IACGC,IAAI,8CACJC,MAAK,SAACC,GACL,IAAIC,EAAiBD,EAASlE,KAAKqC,KAAI,SAACI,GAEtC,OADAA,EAAUvB,SAAU,EACbuB,KAETG,EAAS1C,EAAUiE,QAIzB,OACE,cAAC,IAAD,CAAU7C,MAAOA,EAAjB,SACE,qBAAKU,UAAU,MAAf,SACGhC,EAAO,cAAC,EAAD,CAAUA,KAAMA,IAAW,gCCvBvBoE,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUpD,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJqD,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAACe,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9801bccf.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const slice = createSlice({\r\n  name: \"dataFetch\",\r\n  initialState: {\r\n    data: [],\r\n  },\r\n  reducers: {\r\n    fetchData: (state, action) => {\r\n      state.data = action.payload;\r\n    },\r\n    deleteElement: (state, action) => {\r\n      let elementToDelete = state.data.find(\r\n        (element) => element.id === parseInt(action.payload)\r\n      );\r\n      let indexToDelete = state.data.indexOf(elementToDelete);\r\n      state.data.splice(indexToDelete, 1);\r\n    },\r\n    toggleLike: (state, action) => {\r\n      let elementToLike = state.data.find(\r\n        (element) => element.id === parseInt(action.payload)\r\n      );\r\n      let indexToLike = state.data.indexOf(elementToLike);\r\n      state.data[indexToLike].isLiked = !state.data[indexToLike].isLiked;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { fetchData, deleteElement, toggleLike } = slice.actions;\r\nexport const selectData = (state) => state.dataFetch.data;\r\nexport default slice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport dataFetchReducer from \"../features/dataFetch/dataFetchSlice\";\n\nexport const store = configureStore({\n  reducer: { dataFetch: dataFetchReducer },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { IconContext } from \"react-icons\";\r\nimport { FaHeart, FaRegHeart } from \"react-icons/fa\";\r\n\r\nexport const LikeButton = ({ isLiked, handleClick }: any) => {\r\n  return (\r\n    <button\r\n      onClick={(event) => {\r\n        handleClick(event);\r\n      }}\r\n    >\r\n      {isLiked ? (\r\n        <IconContext.Provider\r\n          value={{ className: \"like-button like-button--liked\" }}\r\n        >\r\n          <FaHeart />\r\n        </IconContext.Provider>\r\n      ) : (\r\n        <IconContext.Provider value={{ className: \"like-button\" }}>\r\n          <FaRegHeart />\r\n        </IconContext.Provider>\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n","import { IconContext } from \"react-icons\";\r\nimport { FaBan } from \"react-icons/fa\";\r\n\r\nexport const DeleteButton = ({ handleClick }: any) => {\r\n  return (\r\n    <button onClick={handleClick}>\r\n      <IconContext.Provider value={{ className: \"delete-button\" }}>\r\n        <FaBan />\r\n      </IconContext.Provider>\r\n    </button>\r\n  );\r\n};\r\n","export const CharacterAbilities = ({ characterAbilities }: any) => {\r\n  return (\r\n    <ul className=\"character-abilities\">\r\n      {characterAbilities.length\r\n        ? characterAbilities\r\n            .slice(0, 3)\r\n            .map((ability: string, index: string) => (\r\n              <li key={index} className=\"character-ability\">\r\n                {ability}\r\n              </li>\r\n            ))\r\n        : \"-\"}\r\n    </ul>\r\n  );\r\n};\r\n","// Component imports\r\nimport { useState } from \"react\";\r\nimport { LikeButton } from \"./LikeButton\";\r\nimport { DeleteButton } from \"./DeleteButton\";\r\nimport { CharacterAbilities } from \"./CharacterAbilities\";\r\n// RTK imports\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteElement,\r\n  toggleLike,\r\n} from \"../features/dataFetch/dataFetchSlice\";\r\n\r\nexport const Card = ({ character }: any) => {\r\n  const [isLiked, setIsLiked] = useState(false); // Card's internal like state for like icon display logic\r\n  const dispatch = useDispatch();\r\n\r\n  const handleLike = (event: any) => {\r\n    setIsLiked(!isLiked);\r\n    dispatch(toggleLike(event.currentTarget.parentElement!.parentElement!.id));\r\n  };\r\n\r\n  const handleDelete = (event: any) => {\r\n    if (window.confirm(\"Are you sure?\")) {\r\n      dispatch(\r\n        deleteElement(event.currentTarget.parentElement!.parentElement!.id)\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id={character.id} className=\"card-list__card\">\r\n      <img\r\n        className=\"character-image\"\r\n        src={character.img_url}\r\n        alt=\"character_image\"\r\n      />\r\n      <div className=\"character-info\">\r\n        <h3 className=\"character-name\">{character.name}</h3>\r\n        <p className=\"character-origin\">from {character.origin}</p>\r\n        <h3 className=\"character-abilities__title\">Abilities:</h3>\r\n        <CharacterAbilities characterAbilities={character.abilities} />\r\n\r\n        <LikeButton isLiked={isLiked} handleClick={handleLike} />\r\n        <DeleteButton handleClick={handleDelete} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport { Card } from \"./Card\";\r\n\r\nexport const CardList = ({ data }: any) => {\r\n  // Filter state\r\n  const [filtered, setFiltered] = useState(false);\r\n\r\n  // Returns untouched data/filtered by isLiked, based on filter state\r\n  const dataBasedOnFilter = (filter: boolean) => {\r\n    return filter === false\r\n      ? data\r\n      : data.filter((character: any) => character.isLiked);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-dc\">\r\n      <button className=\"liked-filter\" onClick={() => setFiltered(!filtered)}>\r\n        Filter\r\n      </button>\r\n      <div className=\"card-list\">\r\n        {dataBasedOnFilter(filtered).map((character: any) => (\r\n          <Card key={character.id} character={character} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchData, selectData } from \"./features/dataFetch/dataFetchSlice\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport \"./App.scss\";\n\nimport { CardList } from \"./components/CardList\";\nimport axios from \"axios\";\n\nfunction App() {\n  // App fetches data on page reload\n  useEffect(() => {\n    axiosFetchData();\n  }, []);\n\n  const data = useSelector(selectData);\n  const dispatch = useDispatch();\n\n  // \"Normalizing\" data by adding a missing isLiked property\n  const axiosFetchData = () => {\n    axios\n      .get(\"https://finalspaceapi.com/api/v0/character\")\n      .then((response: any) => {\n        let normalizedData = response.data.map((character: any) => {\n          character.isLiked = false;\n          return character;\n        });\n        dispatch(fetchData(normalizedData));\n      });\n  };\n\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        {data ? <CardList data={data} /> : \"Loading. Please, wait...\"}\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}